<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Job Scraper</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="/css/dashboard.css">
</head>
<body>
    <!-- Modern Dashboard Header -->
    <div class="dashboard-header">
        <div class="container">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="dashboard-title">Job Scraper Dashboard</h1>
                    <p class="dashboard-subtitle">Your personalized job discovery platform</p>
                    <!-- <div class="welcome-text" id="welcomeMessage">
                        <span class="welcome-icon">ðŸ‘‹</span>
                        Welcome back, <strong><%= user.name %></strong>!
                    </div> -->
                    <% const fromLogin = justLoggedIn === true; %>

                        <% if (fromLogin) { %>
                            <div class="welcome-text" id="welcomeMessage">
                                <span class="welcome-icon">ðŸ‘‹</span>
                                Welcome back, <strong><%= user.name %></strong>!
                            </div>
                        <% } %>
                </div>
                <div class="d-flex gap-3">
                    <a href="/profile" class="btn btn-outline-black btn-lg">
                        <i class="bi bi-person-fill me-2"></i>Profile
                    </a>
                    <a href="/logout" class="btn btn-outline-black btn-lg">
                        <i class="bi bi-box-arrow-right me-2"></i>Logout
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                
                <!-- Success/Error Messages from Profile Updates -->
                <% if (typeof success !== 'undefined' && success) { %>
                    <div class="alert alert-success alert-dismissible fade show" role="alert" id="successAlert">
                        <i class="bi bi-check-circle me-2"></i><%= success %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                <% } %>
                
                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-circle me-2"></i><%= error %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                <% } %>
                
                <% if (!hasProfile) { %>
                    <div class="alert alert-warning" role="alert">
                        <h5>Complete Your Profile</h5>
                        <p>To get better job recommendations and enable job scraping, please complete your profile setup.</p>
                        <a href="/profile" class="btn btn-primary">Setup Profile</a>
                    </div>
                <% } %>
                
                <% if (hasProfile) { %>
                    <!-- Summary Cards Section -->
                    <div class="row mt-4">
                        <div class="col-md-3 mb-3">
                            <div class="stats-card">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h2 class="stats-number"><%= jobs ? jobs.length : 139 %></h2>
                                        <p class="stats-label">Jobs Scraped</p>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-briefcase-fill"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-3 mb-3">
                            <div class="stats-card">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h2 class="stats-number">28</h2>
                                        <p class="stats-label">Jobs Applied</p>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-send-fill"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-3 mb-3">
                            <div class="stats-card">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h2 class="stats-number">156</h2>
                                        <p class="stats-label">Saved Jobs</p>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-bookmark-fill"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-3 mb-3">
                            <div class="stats-card">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h6 class="mb-1" id="scraperStatusText" style="font-size: 1.2rem; font-weight: 600; color: #059669;">Active</h6>
                                        <p class="stats-label">Scraper Status</p>
                                        <small class="text-muted" style="font-size: 0.8rem;">Last run: 2 hours ago</small>
                                    </div>
                                    <div class="stats-icon position-relative" style="min-width:72px;">
                                        <i id="scraperIcon" class="bi bi-robot fs-1 text-secondary" aria-hidden="true"></i>
                                        <span id="scraperStatus" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-secondary" aria-hidden="true">&nbsp;</span>
                                    </div>
                                </div>
                                <div class="mt-3 d-flex gap-2">
                                    <button class="btn btn-outline-primary btn-sm" onclick="toggleScraper()" id="scraperToggleBtn">
                                        <i class="bi bi-pause-fill"></i> Pause
                                    </button>
                                    <button class="btn btn-primary btn-sm" onclick="startManualScraping()" id="manualScrapingBtn">
                                        <i class="bi bi-play-circle"></i> Start
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Job List Section -->
                    <!-- Notification area -->
                    <div id="notification" class="alert" style="display: none; position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 300px;"></div>
                    
                    <!-- Filter Section -->
                    <div class="filter-section">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0"><i class="bi bi-briefcase me-2"></i>Available Jobs</h5>
                            <div class="d-flex align-items-center gap-2">
                                <!-- Table Size Options -->
                                <label for="tableSize" class="form-label me-2 mb-0">Show:</label>
                                <select class="form-select form-select-sm" id="tableSize" onchange="changeTableSize()" style="width: auto;">
                                    <option value="5">5 rows</option>
                                    <option value="10" selected>10 rows</option>
                                    <option value="15">15 rows</option>
                                    <option value="20">20 rows</option>
                                    <option value="25">25 rows</option>
                                    <option value="50">50 rows</option>
                                    <option value="-1">All rows</option>
                                </select>
                                
                                <!-- Action Buttons -->
                                <button class="btn btn-primary btn-sm" onclick="refreshJobs()">
                                    <i class="bi bi-arrow-clockwise"></i> Refresh Jobs
                                </button>
                                <!-- Filters Modal Trigger Button -->
                                <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#filtersModal" id="filterToggleBtn">
                                    <i class="bi bi-funnel"></i> Filters
                                </button>
                            </div>
                        </div>
                            
                            <!-- Search and Filter Section -->
                            <div class="row g-3">
                                <!-- Search Bar -->
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="bi bi-search"></i>
                                        </span>
                                        <input type="text" class="form-control" id="searchInput" 
                                               placeholder="Search jobs by title, company, or keywords..." 
                                               onkeyup="applyFilters()">
                                        <button class="btn btn-outline-secondary" type="button" onclick="clearSearch()">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <!-- Quick Actions -->
                                <div class="col-md-6 text-end">
                                    <button class="btn btn-outline-info btn-sm" onclick="clearAllFilters()">
                                        <i class="bi bi-arrow-counterclockwise"></i> Clear All
                                    </button>
                                    <span class="badge bg-secondary ms-2" id="resultCount">0 jobs found</span>
                                </div>
                            </div>
                            
                            <!-- Advanced Filters (Now in Modal) -->
                        </div>
                        
                        <% if (jobs && jobs.length > 0) { %>
                            <div class="job-table-container">
                                <div class="table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th scope="col"><i class="bi bi-briefcase me-2"></i>Job Title</th>
                                                <th scope="col"><i class="bi bi-award me-2"></i>Experience</th>
                                                <th scope="col"><i class="bi bi-file-text me-2"></i>Description</th>
                                                <th scope="col"><i class="bi bi-building me-2"></i>Company</th>
                                                <th scope="col"><i class="bi bi-geo-alt me-2"></i>Location</th>
                                                <th scope="col"><i class="bi bi-gear me-2"></i>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% jobs.forEach(function(job) { %>
                                                <tr>
                                                    <td>
                                                        <div>
                                                            <h6 class="job-title"><%= job.jobTitle %></h6>
                                                            <p class="job-company"><%= job.companyName %></p>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-secondary"><%= job.experience %></span>
                                                    </td>
                                                    <td>
                                                        <span class="text-truncate d-inline-block" style="max-width: 250px;" 
                                                              title="<%= job.profileDescription %>">
                                                            <%= job.profileDescription %>
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <strong><%= job.companyName %></strong>
                                                    </td>
                                                    <td>
                                                        <span class="job-location"><%= job.location %></span>
                                                    </td>
                                                    <td>
                                                        <div class="job-actions">
                                                            <button type="button" class="btn btn-primary btn-sm" 
                                                                    onclick="viewJob('<%= job._id %>')" title="View Details">
                                                                <i class="bi bi-eye"></i>
                                                            </button>
                                                            <button type="button" class="btn btn-outline-secondary btn-sm" 
                                                                    onclick="applyJob('<%= job._id %>')" title="Apply">
                                                                <i class="bi bi-send"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            <% }) %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                                
                            <!-- Pagination -->
                            <nav aria-label="Jobs pagination" class="mt-3" id="paginationNav">
                                <ul class="pagination justify-content-center" id="paginationList">
                                    <!-- Pagination will be dynamically generated -->
                                </ul>
                            </nav>
                        <% } else { %>
                            <div class="text-center py-5">
                                <i class="bi bi-briefcase display-1 text-muted"></i>
                                <h4 class="mt-3">No Jobs Available</h4>
                                <p class="text-muted">Jobs will appear here once scraping is enabled.</p>
                                <div class="mt-3">
                                    <button class="btn btn-primary" onclick="refreshJobs()">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh Jobs
                                    </button>
                                </div>
                            </div>
                        <% } %>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Filters Modal -->
    <div class="modal fade" id="filtersModal" tabindex="-1" aria-labelledby="filtersModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="filtersModalLabel">Advanced Filters</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="filtersForm" onsubmit="event.preventDefault(); applyFilters(); $('#filtersModal').modal('hide');">
              <div class="row g-3">
                <div class="col-md-3">
                  <label for="roleFilter" class="form-label">Job Role</label>
                  <select class="form-select form-select-sm" id="roleFilter" onchange="applyFilters()">
                    <option value="">All Roles</option>
                    <option value="developer">Developer</option>
                    <option value="engineer">Engineer</option>
                    <option value="manager">Manager</option>
                    <option value="analyst">Analyst</option>
                    <option value="designer">Designer</option>
                    <option value="tester">Tester</option>
                  </select>
                </div>
                <div class="col-md-3">
                  <label for="companyFilter" class="form-label">Company</label>
                  <select class="form-select form-select-sm" id="companyFilter" onchange="applyFilters()">
                    <option value="">All Companies</option>
                    <!-- Company options populated dynamically -->
                  </select>
                </div>
                <div class="col-md-3">
                  <label for="locationFilter" class="form-label">Location</label>
                  <select class="form-select form-select-sm" id="locationFilter" onchange="applyFilters()">
                    <option value="">All Locations</option>
                    <option value="bangalore">Bangalore</option>
                    <option value="mumbai">Mumbai</option>
                    <option value="delhi">Delhi</option>
                    <option value="pune">Pune</option>
                    <option value="hyderabad">Hyderabad</option>
                    <option value="chennai">Chennai</option>
                    <option value="remote">Remote</option>
                  </select>
                </div>
                <div class="col-md-3">
                  <label for="sourceFilter" class="form-label">Source</label>
                  <select class="form-select form-select-sm" id="sourceFilter" onchange="applyFilters()">
                    <option value="">All Sources</option>
                    <option value="linkedin">LinkedIn</option>
                    <option value="naukri">Naukri</option>
                    <option value="indeed">Indeed</option>
                  </select>
                </div>
                <div class="col-md-3">
                  <label for="experienceFilter" class="form-label">Experience</label>
                  <select class="form-select form-select-sm" id="experienceFilter" onchange="applyFilters()">
                    <option value="">All Experience</option>
                    <option value="0-1">0-1 years</option>
                    <option value="1-3">1-3 years</option>
                    <option value="3-5">3-5 years</option>
                    <option value="5-10">5-10 years</option>
                    <option value="10+">10+ years</option>
                  </select>
                </div>
                <div class="col-md-6">
                  <label for="sortBy" class="form-label">Sort By</label>
                  <select class="form-select form-select-sm" id="sortBy" onchange="applyFilters()">
                    <option value="newest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                    <option value="company">Company A-Z</option>
                    <option value="title">Job Title A-Z</option>
                    <option value="location">Location A-Z</option>
                  </select>
                </div>
                <div class="col-md-3">
                  <label class="form-label">&nbsp;</label>
                  <div class="d-flex gap-2">
                    <button class="btn btn-success btn-sm" type="button" onclick="saveFiltersAsDefault()">
                      <i class="bi bi-bookmark"></i> Save
                    </button>
                    <button class="btn btn-outline-warning btn-sm" type="button" onclick="loadDefaultFilters()">
                      <i class="bi bi-bookmark-check"></i> Load
                    </button>
                  </div>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" onclick="applyFilters(); $('#filtersModal').modal('hide');">Apply Filters</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
    // Scraper status variables - default to false until real status is fetched from server
    let scraperRunning = false;

        
        // Pagination variables
        let currentPage = 1;
        let totalPages = 1;
        let currentPageSize = 10;
        let allJobRows = [];
        let filteredJobRows = [];
        
        // Filter variables
        let filtersVisible = false;
        let defaultFilters = {};
        
        // Initialize scraper status on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateScraperStatus();
            initializePagination();
            fetchScraperStatus(); // Get real status from API
            initializeFilters();
            
            // Auto-hide welcome message after 15 seconds (only when coming from login)
            const welcomeMessage = document.getElementById('welcomeMessage');
            const urlParams = new URLSearchParams(window.location.search);
            const fromLogin = urlParams.get('from') === 'login' || urlParams.get('welcome') === 'true';

            
            if (welcomeMessage && fromLogin) {
                setTimeout(function() {
                    welcomeMessage.style.transition = 'opacity 0.5s ease-out';
                    welcomeMessage.style.opacity = '0';
                    setTimeout(function() {
                        welcomeMessage.style.display = 'none';
                    }, 500);
                }, 15000); // Changed from 5000 to 15000 (15 seconds)
            }
            
            // Auto-hide success alert after 5 seconds
            const successAlert = document.getElementById('successAlert');
            if (successAlert) {
                setTimeout(function() {
                    try {
                        const bsAlert = new bootstrap.Alert(successAlert);
                        bsAlert.close();
                    } catch (error) {
                        // Fallback if Bootstrap Alert fails
                        successAlert.style.transition = 'opacity 0.5s ease-out';
                        successAlert.style.opacity = '0';
                        setTimeout(function() {
                            successAlert.style.display = 'none';
                        }, 500);
                    }
                }, 5000);
            }
        });
        
        // Initialize filters
        function initializeFilters() {
            populateCompanyFilter();
            loadDefaultFilters();
            applyFilters(); // Apply initial filters and count
        }
        
        // Populate company filter with unique companies from jobs
        function populateCompanyFilter() {
            const companyFilter = document.getElementById('companyFilter');
            const companies = new Set();
            
            allJobRows.forEach(row => {
                const companyCell = row.cells[3]; // Company Name column
                if (companyCell) {
                    companies.add(companyCell.textContent.trim());
                }
            });
            
            // Clear existing options except "All Companies"
            while (companyFilter.children.length > 1) {
                companyFilter.removeChild(companyFilter.lastChild);
            }
            
            // Add company options
            Array.from(companies).sort().forEach(company => {
                const option = document.createElement('option');
                option.value = company.toLowerCase();
                option.textContent = company;
                companyFilter.appendChild(option);
            });
        }
        
        // Toggle advanced filters visibility
        function toggleFilters() {
            const advancedFilters = document.getElementById('advancedFilters');
            const toggleBtn = document.getElementById('filterToggleBtn');
            
            filtersVisible = !filtersVisible;
            
            if (filtersVisible) {
                advancedFilters.style.display = 'block';
                toggleBtn.innerHTML = '<i class="bi bi-funnel-fill"></i> Hide Filters';
                toggleBtn.classList.remove('btn-outline-secondary');
                toggleBtn.classList.add('btn-secondary');
            } else {
                advancedFilters.style.display = 'none';
                toggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters';
                toggleBtn.classList.remove('btn-secondary');
                toggleBtn.classList.add('btn-outline-secondary');
            }
        }
        
        // Apply all filters
        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const roleFilter = document.getElementById('roleFilter').value.toLowerCase();
            const companyFilter = document.getElementById('companyFilter').value.toLowerCase();
            const locationFilter = document.getElementById('locationFilter').value.toLowerCase();
            const sourceFilter = document.getElementById('sourceFilter').value.toLowerCase();
            const experienceFilter = document.getElementById('experienceFilter').value;
            const sortBy = document.getElementById('sortBy').value;
            
            // Reset to show all rows first
            allJobRows.forEach(row => row.style.display = '');
            
            // Filter rows
            filteredJobRows = allJobRows.filter(row => {
                const cells = row.cells;
                const jobTitle = cells[0].textContent.toLowerCase();
                const experience = cells[1].textContent.toLowerCase();
                const description = cells[2].textContent.toLowerCase();
                const company = cells[3].textContent.toLowerCase();
                const location = cells[4].textContent.toLowerCase();
                
                // Get source from data attribute or guess from job data
                const source = row.dataset.source || guessSource(row);
                
                // Search filter
                const matchesSearch = !searchTerm || 
                    jobTitle.includes(searchTerm) || 
                    company.includes(searchTerm) || 
                    description.includes(searchTerm) ||
                    location.includes(searchTerm);
                
                // Role filter
                const matchesRole = !roleFilter || jobTitle.includes(roleFilter);
                
                // Company filter
                const matchesCompany = !companyFilter || company.includes(companyFilter);
                
                // Location filter
                const matchesLocation = !locationFilter || location.includes(locationFilter);
                
                // Source filter
                const matchesSource = !sourceFilter || source.toLowerCase().includes(sourceFilter);
                
                // Experience filter
                const matchesExperience = !experienceFilter || matchesExperienceRange(experience, experienceFilter);
                
                return matchesSearch && matchesRole && matchesCompany && 
                       matchesLocation && matchesSource && matchesExperience;
            });
            
            // Sort filtered results
            sortFilteredRows(sortBy);
            
            // Hide non-matching rows
            allJobRows.forEach(row => {
                if (!filteredJobRows.includes(row)) {
                    row.style.display = 'none';
                }
            });
            
            // Update result count
            updateResultCount();
            
            // Reset pagination
            currentPage = 1;
            updatePagination();
            displayCurrentPage();
        }
        
        // Guess source platform from job data
        function guessSource(row) {
            // This is a placeholder - in production, jobs should have source metadata
            const company = row.cells[3].textContent.toLowerCase();
            const description = row.cells[2].textContent.toLowerCase();
            
            if (description.includes('linkedin') || company.includes('linkedin')) return 'linkedin';
            if (description.includes('naukri') || company.includes('naukri')) return 'naukri';
            if (description.includes('indeed') || company.includes('indeed')) return 'indeed';
            
            return 'unknown';
        }
        
        // Check if experience matches filter range
        function matchesExperienceRange(experience, filterRange) {
            const expText = experience.toLowerCase();
            
            switch(filterRange) {
                case '0-1':
                    return expText.includes('0') || expText.includes('fresher') || 
                           expText.includes('1 year') || expText.includes('0-1');
                case '1-3':
                    return expText.includes('1-3') || expText.includes('2 year') || 
                           expText.includes('3 year') || /[1-3][-\s]*year/.test(expText);
                case '3-5':
                    return expText.includes('3-5') || expText.includes('4 year') || 
                           expText.includes('5 year') || /[3-5][-\s]*year/.test(expText);
                case '5-10':
                    return expText.includes('5-10') || /[5-9][-\s]*year/.test(expText) ||
                           expText.includes('10 year');
                case '10+':
                    return expText.includes('10+') || /1[0-9][-\s]*year/.test(expText) ||
                           expText.includes('senior') || expText.includes('lead');
                default:
                    return true;
            }
        }
        
        // Sort filtered rows
        function sortFilteredRows(sortBy) {
            filteredJobRows.sort((a, b) => {
                switch(sortBy) {
                    case 'newest':
                        // Assuming row order represents recency
                        return Array.from(allJobRows).indexOf(a) - Array.from(allJobRows).indexOf(b);
                    case 'oldest':
                        return Array.from(allJobRows).indexOf(b) - Array.from(allJobRows).indexOf(a);
                    case 'company':
                        return a.cells[3].textContent.localeCompare(b.cells[3].textContent);
                    case 'title':
                        return a.cells[0].textContent.localeCompare(b.cells[0].textContent);
                    case 'location':
                        return a.cells[4].textContent.localeCompare(b.cells[4].textContent);
                    default:
                        return 0;
                }
            });
        }
        
        // Update result count
        function updateResultCount() {
            const resultCount = document.getElementById('resultCount');
            const count = filteredJobRows.length;
            resultCount.textContent = `${count} job${count !== 1 ? 's' : ''} found`;
            
            if (count === 0) {
                resultCount.className = 'badge bg-warning ms-2';
            } else if (count < 10) {
                resultCount.className = 'badge bg-info ms-2';
            } else {
                resultCount.className = 'badge bg-success ms-2';
            }
        }
        
        // Clear search
        function clearSearch() {
            document.getElementById('searchInput').value = '';
            applyFilters();
        }
        
        // Clear all filters
        function clearAllFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('roleFilter').value = '';
            document.getElementById('companyFilter').value = '';
            document.getElementById('locationFilter').value = '';
            document.getElementById('sourceFilter').value = '';
            document.getElementById('experienceFilter').value = '';
            document.getElementById('sortBy').value = 'newest';
            
            // Reset filtered rows to all rows
            filteredJobRows = [...allJobRows];
            
            // Reset pagination to first page
            currentPage = 1;
            
            // Update display
            updatePagination();
            displayCurrentPage();
            updateResultCount();
            
            showNotification('All filters cleared', 'info');
        }
        
        // Save current filters as default
        function saveFiltersAsDefault() {
            defaultFilters = {
                search: document.getElementById('searchInput').value,
                role: document.getElementById('roleFilter').value,
                company: document.getElementById('companyFilter').value,
                location: document.getElementById('locationFilter').value,
                source: document.getElementById('sourceFilter').value,
                experience: document.getElementById('experienceFilter').value,
                sortBy: document.getElementById('sortBy').value
            };
            
            // Save to localStorage
            localStorage.setItem('jobFilters', JSON.stringify(defaultFilters));
            showNotification('Filter preferences saved', 'success');
        }
        
        // Load default filters
        function loadDefaultFilters() {
            try {
                const saved = localStorage.getItem('jobFilters');
                if (saved) {
                    defaultFilters = JSON.parse(saved);
                    
                    document.getElementById('searchInput').value = defaultFilters.search || '';
                    document.getElementById('roleFilter').value = defaultFilters.role || '';
                    document.getElementById('companyFilter').value = defaultFilters.company || '';
                    document.getElementById('locationFilter').value = defaultFilters.location || '';
                    document.getElementById('sourceFilter').value = defaultFilters.source || '';
                    document.getElementById('experienceFilter').value = defaultFilters.experience || '';
                    document.getElementById('sortBy').value = defaultFilters.sortBy || 'newest';
                    
                    showNotification('Filter preferences loaded', 'info');
                }
            } catch (error) {
                console.error('Error loading default filters:', error);
            }
        }
        
        // Fetch actual scraper status from API
        async function fetchScraperStatus() {
            try {
                const response = await fetch('/scraper/status');
                const data = await response.json();
                
                if (data.success) {
                    scraperRunning = data.data.isRunning;
                    updateScraperStatusFromAPI(data.data);
                }
            } catch (error) {
                console.error('Failed to fetch scraper status:', error);
            }
        }
        
        // Update scraper status display from API data
        function updateScraperStatusFromAPI(statusData) {
            const icon = document.getElementById('scraperIcon');
            const status = document.getElementById('scraperStatus');
            const statusText = document.getElementById('scraperStatusText');
            const toggleBtn = document.getElementById('scraperToggleBtn');
            const manualBtn = document.getElementById('manualScrapingBtn');
            
            if (statusData.isRunning) {
                icon.className = 'bi bi-robot fs-1 text-warning';
                status.className = 'position-absolute top-0 start-100 translate-middle badge rounded-pill bg-warning';
                statusText.textContent = 'Running';
                statusText.className = 'text-warning mb-1';
                toggleBtn.innerHTML = '<i class="bi bi-pause-fill"></i> Pause';
                toggleBtn.className = 'btn btn-outline-danger btn-sm';
                manualBtn.disabled = true;
            } else {
                const statusClass = statusData.status === 'completed' ? 'success' : 
                                   statusData.status === 'error' ? 'danger' : 'secondary';
                
                icon.className = `bi bi-robot fs-1 text-${statusClass}`;
                status.className = `position-absolute top-0 start-100 translate-middle badge rounded-pill bg-${statusClass}`;
                statusText.textContent = statusData.status.charAt(0).toUpperCase() + statusData.status.slice(1);
                statusText.className = `text-${statusClass} mb-1`;
                toggleBtn.innerHTML = '<i class="bi bi-play-fill"></i> Resume';
                toggleBtn.className = 'btn btn-outline-success btn-sm';
                manualBtn.disabled = false;
            }
            
            // Update last run time
            if (statusData.lastRun) {
                const lastRunDate = new Date(statusData.lastRun);
                const lastRunText = document.querySelector('.text-muted');
                if (lastRunText) {
                    lastRunText.textContent = `Last run: ${lastRunDate.toLocaleString()}`;
                }
            }
        }
        
        // Update scraper status display
        function updateScraperStatus() {
            const icon = document.getElementById('scraperIcon');
            const status = document.getElementById('scraperStatus');
            const statusText = document.getElementById('scraperStatusText');
            const toggleBtn = document.getElementById('scraperToggleBtn');
            
            if (scraperRunning) {
                icon.className = 'bi bi-robot fs-1 text-success';
                status.className = 'position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success';
                statusText.textContent = 'Running';
                statusText.className = 'text-success mb-1';
                toggleBtn.innerHTML = '<i class="bi bi-pause-fill"></i> Pause';
                toggleBtn.className = 'btn btn-outline-danger btn-sm';
            } else {
                icon.className = 'bi bi-robot fs-1 text-secondary';
                status.className = 'position-absolute top-0 start-100 translate-middle badge rounded-pill bg-secondary';
                statusText.textContent = 'Stopped';
                statusText.className = 'text-secondary mb-1';
                toggleBtn.innerHTML = '<i class="bi bi-play-fill"></i> Start';
                toggleBtn.className = 'btn btn-outline-success btn-sm';
            }
        }
        
        
        // Show notification
        function showNotification(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.top = '20px';
            alertDiv.style.right = '20px';
            alertDiv.style.zIndex = '9999';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 3000);
        }
        
        // Job functionality
        function viewJob(jobId) {
            alert('View job details for Job ID: ' + jobId);
        }
        
        function applyJob(jobId) {
            if (confirm('Are you sure you want to apply for this job?')) {
                showNotification('Application submitted successfully!', 'success');
                
                // Update applied jobs counter
                const appliedCounter = document.querySelector('.text-success.mb-1');
                if (appliedCounter) {
                    let currentCount = parseInt(appliedCounter.textContent);
                    appliedCounter.textContent = currentCount + 1;
                }
            }
        }
        
        function saveJob(jobId) {
            showNotification('Job saved for later!', 'info');
            
            // Update saved jobs counter
            const savedCounter = document.querySelector('.text-warning.mb-1');
            if (savedCounter) {
                let currentCount = parseInt(savedCounter.textContent);
                savedCounter.textContent = currentCount + 1;
            }
        }
        
        function refreshJobs(e) {
            const refreshBtn = e && e.target ? e.target : document.querySelector('button[onclick="refreshJobs()"]');
            if (refreshBtn) {
                refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise spinner-border spinner-border-sm"></i> Refreshing...';
                refreshBtn.disabled = true;
            }

            // Refresh the table (reload page) without triggering the worker
            setTimeout(() => {
                location.reload();
            }, 600);
        }

        // Toggle scraper status: if running -> stop worker, if stopped -> start worker
        async function toggleScraper() {
            const toggleBtn = document.getElementById('scraperToggleBtn');
            const manualBtn = document.getElementById('manualScrapingBtn');

            toggleBtn.disabled = true;
            toggleBtn.innerHTML = '<i class="bi bi-arrow-repeat spinner-border spinner-border-sm"></i> Processing...';

            try {
                if (scraperRunning) {
                    toggleBtn.innerHTML = '<i class="bi bi-pause-fill"></i> Pause';
                    toggleBtn.disabled = true;
                    // stop by platform (use tasks proxy)
                    const resp = await fetch(`/tasks/stop?platform=linkedin`, { method: 'POST' });
                    const data = await resp.json().catch(() => ({}));

                    if (resp.ok) {
                        scraperRunning = false;
                        updateScraperStatus();
                        showNotification('Scraper paused successfully', 'success');
                    } else {
                        showNotification(data.message || data.detail || 'Failed to pause scraper', 'danger');
                    }
                } else {
                    toggleBtn.innerHTML = '<i class="bi bi-arrow-repeat spinner-border spinner-border-sm"></i> Processing...';
                    toggleBtn.disabled = true;

                    // start the worker via tasks proxy
                    const resp = await fetch(`/tasks/start/linkedin`, { method: 'POST' });
                    const data = await resp.json().catch(() => ({}));
                    if (resp.ok && (data.message === 'started' || data.message === 'alredy_started' || data.success)) {
                        scraperRunning = true;
                        updateScraperStatus();
                        showNotification(data.message === 'alredy_started' ? 'Scraper already running' : 'Scraper started', 'success');
                        // begin polling for status
                        startStatusPolling();
                    } else {
                        showNotification(data.message || 'Failed to start scraper', 'danger');
                    }
                }
            } catch (error) {
                console.error('toggleScraper error:', error);
                showNotification('Failed to toggle scraper', 'danger');
            } finally {
                toggleBtn.disabled = false;
            }
        }
        
        // Start manual scraping
        async function startManualScraping() {
            const manualBtn = document.getElementById('manualScrapingBtn');

            try {
                manualBtn.innerHTML = '<i class="bi bi-gear spinner-border spinner-border-sm"></i> Starting...';
                manualBtn.disabled = true;

                const platform = 'linkedin';

                // Use tasks proxy to start worker immediately and get quick response
                const resp = await fetch(`/tasks/start/${platform}`, { method: 'POST' });
                const data = await resp.json().catch(() => ({}));

                if (resp.ok && (data.message === 'started' || data.message === 'alredy_started' || data.success)) {
                    scraperRunning = true;
                    updateScraperStatus();
                    manualBtn.style.display = 'none';
                    showNotification(data.message === 'alredy_started' ? 'Scraper already running' : 'Scraper started', 'success');
                    startStatusPolling();
                } else {
                    showNotification(data.message || 'Failed to start scraper', 'danger');
                }

            } catch (error) {
                console.error('Manual scraping error:', error);
                showNotification('Failed to start scraping. Please try again.', 'danger');
            } finally {
                manualBtn.innerHTML = '<i class="bi bi-play-circle"></i> Start';
                manualBtn.disabled = false;
            }
        }
        
        // Start polling for status updates during scraping
        function startStatusPolling() {
            const pollInterval = setInterval(async () => {
                try {
                    const response = await fetch('/scraper/status');
                    const data = await response.json();
                    
                    if (data.success) {
                        updateScraperStatusFromAPI(data.data);
                        
                        // Stop polling when scraping is complete
                        if (!data.data.isRunning) {
                            clearInterval(pollInterval);
                            
                            if (data.data.status === 'completed') {
                                showNotification(`Scraping completed! Found ${data.data.jobsScraped} new jobs.`, 'success');
                                
                                // Refresh job list after a delay
                                setTimeout(() => {
                                    location.reload();
                                }, 2000);
                            } else if (data.data.status === 'error') {
                                showNotification(`Scraping failed: ${data.data.error}`, 'danger');
                            }
                        }
                    }
                } catch (error) {
                    console.error('Status polling error:', error);
                    clearInterval(pollInterval);
                }
            }, 2000); // Poll every 2 seconds
            
            // Stop polling after 5 minutes max
            setTimeout(() => {
                clearInterval(pollInterval);
            }, 300000);
        }
        
        function filterJobs() {
            alert('Filter functionality coming soon!');
        }
        
        // Show notification
        function showNotification(message, type = 'info') {
            const notification = document.getElementById('notification');
            notification.className = `alert alert-${type} alert-dismissible fade show`;
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" onclick="hideNotification()"></button>
            `;
            notification.style.display = 'block';
            
            // Auto hide after 3 seconds
            setTimeout(hideNotification, 3000);
        }
        
        // Hide notification
        function hideNotification() {
            const notification = document.getElementById('notification');
            notification.style.display = 'none';
        }
        
        // Change table size functionality
        function changeTableSize() {
            const tableSize = document.getElementById('tableSize').value;
            currentPageSize = tableSize === '-1' ? -1 : parseInt(tableSize);
            currentPage = 1; // Reset to first page when changing size
            
            if (currentPageSize === -1) {
                showNotification('Showing all rows', 'info');
            } else {
                showNotification(`Showing ${currentPageSize} rows per page`, 'info');
            }
            
            // Update display and pagination
            updatePagination();
            displayCurrentPage();
        }
        
        // Update pagination based on table size (legacy function - now handled by updatePagination)
        function updatePaginationForTableSize(tableSize, totalRows) {
            // This function is now handled by updatePagination()
            updatePagination();
        }
        
        // Initialize table size on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize all functionality
            initializePagination();
            populateFilterOptions();
            loadDefaultFilters();
            
            // Apply initial table size and filters
            changeTableSize();
            applyFilters();
            
            // Update result count
            updateResultCount();
        });
        
        // Update result count display
        function updateResultCount() {
            const resultCountEl = document.getElementById('resultCount');
            if (resultCountEl) {
                const count = filteredJobRows ? filteredJobRows.length : allJobRows.length;
                resultCountEl.textContent = `${count} jobs found`;
            }
        }
        
        // Populate filter options dynamically
        function populateFilterOptions() {
            const companyFilter = document.getElementById('companyFilter');
            if (companyFilter && allJobRows.length > 0) {
                const companies = new Set();
                allJobRows.forEach(row => {
                    const companyCell = row.cells[3]; // Company is in 4th column
                    if (companyCell) {
                        companies.add(companyCell.textContent.trim());
                    }
                });
                
                // Clear existing options except "All Companies"
                companyFilter.innerHTML = '<option value="">All Companies</option>';
                
                // Add company options
                [...companies].sort().forEach(company => {
                    const option = document.createElement('option');
                    option.value = company.toLowerCase();
                    option.textContent = company;
                    companyFilter.appendChild(option);
                });
            }
        }
        
        // Update result count display
        function updateResultCount() {
            const resultCountEl = document.getElementById('resultCount');
            if (resultCountEl) {
                const count = filteredJobRows ? filteredJobRows.length : allJobRows.length;
                resultCountEl.textContent = `${count} jobs found`;
            }
        }
        
        // Populate filter options dynamically
        function populateFilterOptions() {
            const companyFilter = document.getElementById('companyFilter');
            if (companyFilter && allJobRows.length > 0) {
                const companies = new Set();
                allJobRows.forEach(row => {
                    const companyCell = row.cells[3]; // Company is in 4th column
                    if (companyCell) {
                        companies.add(companyCell.textContent.trim());
                    }
                });
                
                // Clear existing options except "All Companies"
                companyFilter.innerHTML = '<option value="">All Companies</option>';
                
                // Add company options
                [...companies].sort().forEach(company => {
                    const option = document.createElement('option');
                    option.value = company.toLowerCase();
                    option.textContent = company;
                    companyFilter.appendChild(option);
                });
            }
        }
        
        function initializePagination() {
            const tableBody = document.querySelector('tbody');
            if (tableBody) {
                allJobRows = Array.from(tableBody.querySelectorAll('tr'));
                filteredJobRows = [...allJobRows]; // Initialize with all rows
                updatePagination();
            }
        }
        
        // Update pagination display
        function updatePagination() {
            const paginationList = document.getElementById('paginationList');
            const paginationNav = document.getElementById('paginationNav');
            
            if (!paginationList || !paginationNav) return;
            
            // Use filtered rows for pagination
            const rowsToUse = filteredJobRows.length > 0 ? filteredJobRows : allJobRows;
            
            // Calculate total pages
            if (currentPageSize === -1) {
                totalPages = 1;
                paginationNav.style.display = 'none';
                return;
            } else {
                totalPages = Math.ceil(rowsToUse.length / currentPageSize);
                paginationNav.style.display = totalPages > 1 ? 'block' : 'none';
            }
            
            // Clear existing pagination
            paginationList.innerHTML = '';
            
            if (totalPages <= 1) return;
            
            // Previous button
            const prevItem = document.createElement('li');
            prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevItem.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage - 1})" tabindex="-1">Previous</a>`;
            paginationList.appendChild(prevItem);
            
            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            if (startPage > 1) {
                const firstItem = document.createElement('li');
                firstItem.className = 'page-item';
                firstItem.innerHTML = `<a class="page-link" href="#" onclick="goToPage(1)">1</a>`;
                paginationList.appendChild(firstItem);
                
                if (startPage > 2) {
                    const ellipsis = document.createElement('li');
                    ellipsis.className = 'page-item disabled';
                    ellipsis.innerHTML = '<span class="page-link">...</span>';
                    paginationList.appendChild(ellipsis);
                }
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageItem.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${i})">${i}</a>`;
                paginationList.appendChild(pageItem);
            }
            
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const ellipsis = document.createElement('li');
                    ellipsis.className = 'page-item disabled';
                    ellipsis.innerHTML = '<span class="page-link">...</span>';
                    paginationList.appendChild(ellipsis);
                }
                
                const lastItem = document.createElement('li');
                lastItem.className = 'page-item';
                lastItem.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${totalPages})">${totalPages}</a>`;
                paginationList.appendChild(lastItem);
            }
            
            // Next button
            const nextItem = document.createElement('li');
            nextItem.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextItem.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage + 1})">Next</a>`;
            paginationList.appendChild(nextItem);
        }
        
        // Navigate to specific page
        function goToPage(page) {
            if (page < 1 || page > totalPages || page === currentPage) return;
            
            currentPage = page;
            displayCurrentPage();
            updatePagination();
        }
        
        // Display rows for current page
        function displayCurrentPage() {
            // Use filtered rows if filters are applied
            const rowsToUse = filteredJobRows.length > 0 ? filteredJobRows : allJobRows;
            
            if (currentPageSize === -1) {
                // Show all filtered rows
                rowsToUse.forEach(row => {
                    row.style.display = '';
                });
                // Hide non-filtered rows
                allJobRows.forEach(row => {
                    if (!rowsToUse.includes(row)) {
                        row.style.display = 'none';
                    }
                });
                return;
            }
            
            const startIndex = (currentPage - 1) * currentPageSize;
            const endIndex = startIndex + currentPageSize;
            
            // Hide all rows first
            allJobRows.forEach(row => {
                row.style.display = 'none';
            });
            
            // Show only the rows for current page from filtered results
            rowsToUse.forEach((row, index) => {
                if (index >= startIndex && index < endIndex) {
                    row.style.display = '';
                }
            });
        }
    </script>
</body>
</html>